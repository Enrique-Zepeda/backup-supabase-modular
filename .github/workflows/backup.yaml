name: supabase-backup

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

env:
  BACKUP_ENABLED: true

jobs:
  run_db_backup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      BACKUP_ENABLED: ${{ vars.BACKUP_ENABLED }}
    steps:
      - name: Check if backups are enabled
        run: |
          if [ "$BACKUP_ENABLED" != "true" ]; then
            echo "Backups are disabled. Exiting workflow."
            exit 0
          fi

      - name: Checkout repository
        if: env.BACKUP_ENABLED == 'true'
        uses: actions/checkout@v3

      - name: Setup Supabase CLI
        if: env.BACKUP_ENABLED == 'true'
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # --- Forzar IPv4 resolviendo la A del host y agregando hostaddr ---
      - name: Resolve Supabase host IPv4 and build URL
        if: env.BACKUP_ENABLED == 'true'
        run: |
          sudo apt-get update -y && sudo apt-get install -y dnsutils
          DB_HOST=$(echo "$SUPABASE_DB_URL" | sed -E 's|.*@([^:/?]+).*|\1|')
          DB_IPV4=$(dig +short A "$DB_HOST" | head -n1)
          if [ -z "$DB_IPV4" ]; then
            echo "No IPv4 address found for $DB_HOST"
            exit 1
          fi
          echo "Resolved $DB_HOST to $DB_IPV4"
          # Si la URL ya trae ?, usar &; si no, usar ?
          if [[ "$SUPABASE_DB_URL" == *\?* ]]; then SEP="&"; else SEP="?"; fi
          echo "DB_URL_IPV4=${SUPABASE_DB_URL}${SEP}hostaddr=${DB_IPV4}" >> $GITHUB_ENV

      - name: Create backups folder
        if: env.BACKUP_ENABLED == 'true'
        run: mkdir -p prisma/backups

      - name: Backup roles
        if: env.BACKUP_ENABLED == 'true'
        run: supabase db dump --db-url "$DB_URL_IPV4" -f prisma/backups/roles.sql --role-only

      - name: Backup schema
        if: env.BACKUP_ENABLED == 'true'
        run: supabase db dump --db-url "$DB_URL_IPV4" -f prisma/backups/schema.sql

      - name: Backup data
        if: env.BACKUP_ENABLED == 'true'
        run: supabase db dump --db-url "$DB_URL_IPV4" -f prisma/backups/data.sql --data-only --use-copy

      - name: Commit backups
        if: env.BACKUP_ENABLED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Supabase backup
